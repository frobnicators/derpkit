/** \file
 *  This C header file was generated by $ANTLR version 3.2 debian-7ubuntu3
 *
 *     -  From the grammar source file : ../src/css/parser/css3.g
 *     -                            On : 2014-02-23 18:51:15
 *     -                 for the lexer : css3LexerLexer *
 * Editing it, at least manually, is not wise. 
 *
 * C language generator and runtime by Jim Idle, jimi|hereisanat|idle|dotgoeshere|ws.
 *
 *
 * The lexer css3Lexer has the callable functions (rules) shown below,
 * which will invoke the code for the associated rule in the source grammar
 * assuming that the input stream is pointing to a token/text stream that could begin
 * this rule.
 * 
 * For instance if you call the first (topmost) rule in a parser grammar, you will
 * get the results of a full parse, but calling a rule half way through the grammar will
 * allow you to pass part of a full token stream to the parser, such as for syntax checking
 * in editors and so on.
 *
 * The parser entry points are called indirectly (by function pointer to function) via
 * a parser context typedef pcss3Lexer, which is returned from a call to css3LexerNew().
 *
 * As this is a generated lexer, it is unlikely you will call it 'manually'. However
 * the methods are provided anyway.
 * * The methods in pcss3Lexer are  as follows:
 *
 *  -  void      pcss3Lexer->T__103(pcss3Lexer)
 *  -  void      pcss3Lexer->T__104(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_HEXCHAR(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_NONASCII(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_UNICODE(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_ESCAPE(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_NMSTART(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_NMCHAR(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_NAME(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_URL(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_A(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_B(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_C(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_D(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_E(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_F(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_G(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_H(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_I(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_J(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_K(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_L(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_M(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_N(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_O(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_P(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_Q(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_R(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_S(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_T(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_U(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_V(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_W(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_X(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_Y(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_Z(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_COMMENT(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_SL_COMMENT(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_CDO(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_CDC(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_STAREQ(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_CIREQ(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_DOLLAREQ(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_GREATER(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_LBRACE(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_RBRACE(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_LBRACKET(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_RBRACKET(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_OPEQ(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_SEMI(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_COLON(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_SOLIDUS(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_MINUS(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_PLUS(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_STAR(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_LPAREN(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_RPAREN(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_COMMA(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_DOT(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_TILDE(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_STRING(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_IDENT(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_HASH(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_IMPORT_SYM(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_PAGE_SYM(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_MEDIA_SYM(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_CHARSET_SYM(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_IMPORTANT_SYM(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_EMS(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_EXS(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_LENGTH(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_ANGLE(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_TIME(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_FREQ(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_DIMENSION(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_PERCENTAGE(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_NUMBER(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_URI(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_WS(pcss3Lexer)
 *  -  void      pcss3Lexer->CSS_NL(pcss3Lexer)
 *  -  void      pcss3Lexer->Tokens(pcss3Lexer)
 *
 * The return type for any particular rule is of course determined by the source
 * grammar file.
 */
// [The "BSD licence"]
// Copyright (c) 2005-2009 Jim Idle, Temporal Wave LLC
// http://www.temporal-wave.com
// http://www.linkedin.com/in/jimidle
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
// 1. Redistributions of source code must retain the above copyright
//    notice, this list of conditions and the following disclaimer.
// 2. Redistributions in binary form must reproduce the above copyright
//    notice, this list of conditions and the following disclaimer in the
//    documentation and/or other materials provided with the distribution.
// 3. The name of the author may not be used to endorse or promote products
//    derived from this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR
// IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
// OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
// IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
// INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
// NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
// THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

#ifndef	_css3Lexer_H
#define _css3Lexer_H
/* =============================================================================
 * Standard antlr3 C runtime definitions
 */
#include    <antlr3.h>

/* End of standard antlr 3 runtime definitions
 * =============================================================================
 */
 
#ifdef __cplusplus
extern "C" {
#endif

// Forward declare the context typedef so that we can use it before it is
// properly defined. Delegators and delegates (from import statements) are
// interdependent and their context structures contain pointers to each other
// C only allows such things to be declared if you pre-declare the typedef.
//
typedef struct css3Lexer_Ctx_struct css3Lexer, * pcss3Lexer;



#ifdef	ANTLR3_WINDOWS
// Disable: Unreferenced parameter,							- Rules with parameters that are not used
//          constant conditional,							- ANTLR realizes that a prediction is always true (synpred usually)
//          initialized but unused variable					- tree rewrite variables declared but not needed
//          Unreferenced local variable						- lexer rule declares but does not always use _type
//          potentially unitialized variable used			- retval always returned from a rule 
//			unreferenced local function has been removed	- susually getTokenNames or freeScope, they can go without warnigns
//
// These are only really displayed at warning level /W4 but that is the code ideal I am aiming at
// and the codegen must generate some of these warnings by necessity, apart from 4100, which is
// usually generated when a parser rule is given a parameter that it does not use. Mostly though
// this is a matter of orthogonality hence I disable that one.
//
#pragma warning( disable : 4100 )
#pragma warning( disable : 4101 )
#pragma warning( disable : 4127 )
#pragma warning( disable : 4189 )
#pragma warning( disable : 4505 )
#pragma warning( disable : 4701 )
#endif

/* ========================
 * BACKTRACKING IS ENABLED
 * ========================
 */

/** Context tracking structure for css3Lexer
 */
struct css3Lexer_Ctx_struct
{
    /** Built in ANTLR3 context tracker contains all the generic elements
     *  required for context tracking.
     */
    pANTLR3_LEXER    pLexer;


     void (*mT__103)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mT__104)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_HEXCHAR)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_NONASCII)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_UNICODE)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_ESCAPE)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_NMSTART)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_NMCHAR)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_NAME)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_URL)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_A)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_B)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_C)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_D)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_E)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_F)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_G)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_H)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_I)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_J)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_K)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_L)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_M)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_N)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_O)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_P)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_Q)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_R)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_S)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_T)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_U)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_V)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_W)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_X)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_Y)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_Z)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_COMMENT)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_SL_COMMENT)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_CDO)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_CDC)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_STAREQ)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_CIREQ)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_DOLLAREQ)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_GREATER)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_LBRACE)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_RBRACE)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_LBRACKET)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_RBRACKET)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_OPEQ)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_SEMI)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_COLON)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_SOLIDUS)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_MINUS)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_PLUS)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_STAR)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_LPAREN)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_RPAREN)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_COMMA)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_DOT)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_TILDE)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_STRING)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_IDENT)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_HASH)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_IMPORT_SYM)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_PAGE_SYM)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_MEDIA_SYM)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_CHARSET_SYM)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_IMPORTANT_SYM)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_EMS)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_EXS)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_LENGTH)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_ANGLE)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_TIME)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_FREQ)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_DIMENSION)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_PERCENTAGE)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_NUMBER)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_URI)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_WS)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mCSS_NL)	(struct css3Lexer_Ctx_struct * ctx);
     void (*mTokens)	(struct css3Lexer_Ctx_struct * ctx);    const char * (*getGrammarFileName)();
    void	    (*free)   (struct css3Lexer_Ctx_struct * ctx);
        
};

// Function protoypes for the constructor functions that external translation units
// such as delegators and delegates may wish to call.
//
ANTLR3_API pcss3Lexer css3LexerNew         (pANTLR3_INPUT_STREAM instream);
ANTLR3_API pcss3Lexer css3LexerNewSSD      (pANTLR3_INPUT_STREAM instream, pANTLR3_RECOGNIZER_SHARED_STATE state);

/** Symbolic definitions of all the tokens that the lexer will work with.
 * \{
 *
 * Antlr will define EOF, but we can't use that as it it is too common in
 * in C header files and that would be confusing. There is no way to filter this out at the moment
 * so we just undef it here for now. That isn't the value we get back from C recognizers
 * anyway. We are looking for ANTLR3_TOKEN_EOF.
 */
#ifdef	EOF
#undef	EOF
#endif
#ifdef	Tokens
#undef	Tokens
#endif 
#define CSS_CONTAINS      16
#define CSS_ENDSWITH      18
#define CSS_IDENT      34
#define CSS_B      71
#define CSS_C      72
#define CSS_A      70
#define CSS_J      79
#define CSS_K      80
#define CSS_H      77
#define CSS_I      78
#define CSS_TILDE      43
#define CSS_LBRACKET      47
#define CSS_F      75
#define CSS_G      76
#define CSS_D      73
#define CSS_E      74
#define CSS_S      88
#define CSS_R      87
#define CSS_RBRACKET      52
#define CSS_Q      86
#define CSS_P      85
#define CSS_O      84
#define CSS_N      83
#define CSS_M      82
#define CSS_L      81
#define CSS_COMMA      28
#define CSS_SELECTOR      12
#define CSS_Z      95
#define EOF      -1
#define CSS_Y      94
#define CSS_STAREQ      49
#define CSS_X      93
#define CSS_W      92
#define CSS_V      91
#define CSS_FREQ      61
#define CSS_U      90
#define CSS_T      89
#define CSS_GREATER      42
#define CSS_STAR      48
#define CSS_CHARSET_SYM      25
#define CSS_NMSTART      66
#define CSS_ATTRIB      13
#define CSS_EXS      58
#define CSS_IMPORTANT      24
#define CSS_URL      69
#define CSS_URI      30
#define CSS_PSEUDO      14
#define CSS_PERCENTAGE      55
#define CSS_CLASS      23
#define CSS_EQUAL      15
#define CSS_HASH      45
#define CSS_TAG      21
#define CSS_CIREQ      50
#define CSS_CDC      99
#define CSS_AT_RULE      9
#define CSS_CDO      98
#define CSS_PAGE      10
#define CSS_NUMBER      54
#define CSS_SL_COMMENT      97
#define CSS_LPAREN      35
#define CSS_NONASCII      63
#define CSS_DOT      46
#define CSS_RBRACE      33
#define CSS_LBRACE      32
#define CSS_NMCHAR      67
#define CSS_PAGE_SYM      38
#define CSS_SOLIDUS      39
#define CSS_SEMI      27
#define CSS_STRING      26
#define CSS_UNICODE      64
#define CSS_STARTSWITH      17
#define T__103      103
#define T__104      104
#define CSS_TIME      60
#define CSS_HEXCHAR      62
#define CSS_DOLLAREQ      51
#define CSS_ID      22
#define CSS_PROPERTY      19
#define CSS_DIMENSION      101
#define CSS_NL      102
#define CSS_IMPORT      4
#define CSS_IMPORT_SYM      29
#define CSS_LENGTH      56
#define CSS_ESCAPE      65
#define CSS_WS      100
#define CSS_COMMENT      96
#define CSS_CHARSET      6
#define CSS_EMS      57
#define CSS_IMPORTANT_SYM      53
#define CSS_MINUS      44
#define CSS_ANGLE      59
#define CSS_COLON      36
#define CSS_PLUS      41
#define CSS_MEDIA_SYM      31
#define CSS_ARGS      20
#define CSS_RPAREN      37
#define CSS_RULE      11
#define CSS_MEDIUMS      7
#define CSS_NAME      68
#define CSS_MEDIA      5
#define CSS_MEDIA_EXPR      8
#define CSS_OPEQ      40
#ifdef	EOF
#undef	EOF
#define	EOF	ANTLR3_TOKEN_EOF
#endif

#ifndef TOKENSOURCE
#define TOKENSOURCE(lxr) lxr->pLexer->rec->state->tokSource
#endif

/* End of token definitions for css3Lexer
 * =============================================================================
 */
/** \} */

#ifdef __cplusplus
}
#endif

#endif

/* END - Note:Keep extra line feed to satisfy UNIX systems */
